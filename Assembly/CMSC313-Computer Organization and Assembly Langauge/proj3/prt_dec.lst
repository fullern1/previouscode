     1                                  	;; Nathaniel Fuller
     2                                  	;; CMSC 313
     3                                  	;; Project 3
     4                                  
     5                                  global prt_dec
     6                                  
     7                                  [SECTION .data]
     8 00000000 00                      printChar:	db 0		; used to help print
     9                                  
    10                                  [SECTION .text]
    11                                  prt_dec:
    12 00000000 8B442404                	mov eax, [esp+4]
    13 00000004 53                      	push ebx		; (First in/Last out)
    14 00000005 52                      	push edx		; push values to stack
    15 00000006 57                      	push edi		;
    16 00000007 55                      	push ebp		; (Last in/First out)
    17                                  
    18 00000008 BB0A000000              	mov ebx, 10 		; what to divide eax by
    19 0000000D BF00000000              	mov edi, 0		; use edi as counter
    20 00000012 3D00000000              	cmp eax, 0		; check for case where value passed is 0
    21 00000017 7405                    	je .zeroChar		; if value passed is 0 jump to .zeroChar
    22                                  
    23 00000019 E93D000000              	jmp .divNum
    24                                  
    25                                  .zeroChar:
    26 0000001E 50                      	push eax		; push 0 to stack to be printed
    27 0000001F 81C701000000            	add edi, 1		; inc counter by 1
    28                                  	
    29                                  .cont:
    30 00000025 59                      	pop ecx			; pop number to print to ecx
    31 00000026 81C130000000            	add ecx, 48		; add 48 to print out correct number value
    32 0000002C 890D[00000000]          	mov [printChar], ecx
    33                                  	
    34 00000032 B804000000              	mov eax, 4		; write
    35 00000037 BB01000000              	mov ebx, 1		; out
    36 0000003C B9[00000000]            	mov ecx, printChar
    37 00000041 BA04000000              	mov edx, 4
    38 00000046 CD80                    	int 80H
    39 00000048 81EF01000000            	sub edi, 1		; dec counter by 1
    40 0000004E 81FF00000000            	cmp edi, 0		; check if counter = 0
    41 00000054 7FCF                    	jg .cont		; return to .cont to continue printing
    42                                  
    43                                  .done:
    44 00000056 5D                      	pop ebp			; return values to original registers
    45 00000057 5F                      	pop edi
    46 00000058 5A                      	pop edx
    47 00000059 5B                      	pop ebx
    48 0000005A C3                      	ret			; return to main func
    49                                  
    50                                  .divNum:
    51 0000005B BA00000000              	mov edx, 0		; zero out edx
    52 00000060 3D00000000              	cmp eax, 0		; check if eax = 0
    53 00000065 74BE                    	je .cont		; if eax = 0 div is complete
    54 00000067 F7F3                    	div ebx 		; divide eax by ebx (10)
    55 00000069 52                      	push edx 		; store remainder in stack
    56 0000006A 81C701000000            	add edi, 1		; inc counter by 1
    57 00000070 E9E6FFFFFF              	jmp .divNum		; continue loop
    58                                  	
