//Nathaniel Fuller
//CMSC 341
//Project 1

#include <iostream>
#include <utility>
#include "Graph.h"

using namespace std;

int main(){
  Graph* Gptr = new Graph(8) ;

  // add some edges
  Gptr->addEdge(3,4) ;
  Gptr->addEdge(1,4) ;
  Gptr->addEdge(0,3) ;
  Gptr->addEdge(0,4) ;
  Gptr->addEdge(0,1) ;
  Gptr->addEdge(1,2) ;
  Gptr->addEdge(2,4) ;
  Gptr->addEdge(5,1);
  Gptr->addEdge(5,3);
  Gptr->addEdge(5,7);
  Gptr->addEdge(6,2);
  Gptr->addEdge(6,8);
  Gptr->addEdge(7,3);
  Gptr->addEdge(8,7);
  Gptr->addEdge(8,3);


  // dump out data structure
  Gptr->dump() ;

  // Test neighbor iterator
  //
  Graph::NbIterator nit ;

  cout << "The neighbors of vertex 3 are:\n" ;
  for (nit = Gptr->nbBegin(3); nit != Gptr->nbEnd(3) ; nit++) {
    cout << *nit << " " ;
  }
  cout << endl;

  // make a copy using copy constructor
  Graph* Gptr2 = new Graph(*Gptr) ;
  Gptr2->dump() ;

  // get rid off original graph
  // check if new graph is still there
  delete Gptr ;
  Gptr2->dump() ;

  // Make another graph and dump
  Graph G3(3) ;
  G3.addEdge(0,1) ;
  G3.addEdge(0,2) ;
  G3.addEdge(1,2) ;
  G3.dump() ;

  cout << "The neighbors of vertex 2 are:\n" ;
  for (nit = G3.nbBegin(2); nit != G3.nbEnd(2) ; nit++) {
    cout << *nit << " " ;
  }
  cout << endl;

  // Test edge iterator
  //
  Graph::EgIterator eit ;
  pair<int,int> edge ;

  cout << "The edges in the graph are:\n" ;
  for (eit = G3.egBegin() ; eit != G3.egEnd() ; eit++) {

    edge = *eit ;   // get current edge

    // the two data members of a pair are first and second
    //
    cout << "(" << edge.first << ", " << edge.second << ") " ;

  }
  cout << endl ;

  // Copy over G3 and dump
  G3 = *Gptr2 ;
  G3.dump() ;

  // Test edge iterator
  //
  Graph::EgIterator eit ;
  pair<int,int> edge ;

  cout << "The edges in the graph are:\n" ;
  for (eit = G3.egBegin() ; eit != G3.egEnd() ; eit++) {

    edge = *eit ;   // get current edge

    // the two data members of a pair are first and second
    //
    cout << "(" << edge.first << ", " << edge.second << ") " ;

  }
  cout << endl ;


  delete Gptr2 ;
}
